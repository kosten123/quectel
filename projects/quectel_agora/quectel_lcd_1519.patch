diff --git a/include/driver/lcd_types.h b/include/driver/lcd_types.h
old mode 100755
new mode 100644
index a7c20863a..ebbde00c3
--- a/include/driver/lcd_types.h
+++ b/include/driver/lcd_types.h
@@ -48,6 +48,7 @@ typedef enum {
 	LCD_DEVICE_MD0700R, /**< 1024X600 RGB  */
 	LCD_DEVIDE_ST7710S, /**< 480X800 RGB  */
 	LCD_DEVICE_ST7701S, /**< 480X480 RGB  */
+	LCD_DEVICE_ST7701S_QL,
 } lcd_device_id_t;
 
 typedef enum {
diff --git a/include/driver/media_types.h b/include/driver/media_types.h
old mode 100755
new mode 100644
index 987707866..0a50f6d28
--- a/include/driver/media_types.h
+++ b/include/driver/media_types.h
@@ -75,6 +75,7 @@ typedef enum
 	PPI_720X288     = (PIXEL_720 << 16) | PIXEL_288,
 	PPI_720X576     = (PIXEL_720 << 16) | PIXEL_576,
 	PPI_800X480     = (PIXEL_800 << 16) | PIXEL_480,
+	PPI_854X480     = (PIXEL_854 << 16) | PIXEL_480,
 	PPI_864X480     = (PIXEL_864 << 16) | PIXEL_480,
 	PPI_800X600     = (PIXEL_800 << 16) | PIXEL_600,
 	PPI_1024X600    = (PIXEL_1024 << 16) | PIXEL_600,
@@ -366,7 +367,8 @@ static inline media_ppi_t get_string_to_ppi(char *string)
 
 	if (os_strcmp(string, "480X854") == 0)
 	{
-		value = PPI_480X854;
+		//value = PPI_480X854;
+		  value = PPI_854X480;
 	}
 
 	if (os_strcmp(string, "800X600") == 0)
diff --git a/middleware/driver/CMakeLists.txt b/middleware/driver/CMakeLists.txt
old mode 100755
new mode 100644
index ac6ed761e..538bd7c80
--- a/middleware/driver/CMakeLists.txt
+++ b/middleware/driver/CMakeLists.txt
@@ -206,6 +206,7 @@ if (CONFIG_LCD)
 	list(APPEND srcs
 		"lcd/lcd_driver.c"
 		"lcd/lcd_spi.c"
+		"lcd/lcd_st7701s_ql.c"
 		)
 
 if (CONFIG_LCD_GC9503V)
diff --git a/middleware/driver/lcd/lcd_devices.h b/middleware/driver/lcd/lcd_devices.h
old mode 100755
new mode 100644
index 1e487c1ba..4b4d010cb
--- a/middleware/driver/lcd/lcd_devices.h
+++ b/middleware/driver/lcd/lcd_devices.h
@@ -21,6 +21,8 @@
 extern "C" {
 #endif
 
+extern const lcd_device_t lcd_device_st7701s_ql;
+
 #if CONFIG_LCD_ST7282
 extern const lcd_device_t lcd_device_st7282;
 #endif
diff --git a/middleware/driver/lcd/lcd_driver.c b/middleware/driver/lcd/lcd_driver.c
old mode 100755
new mode 100644
index b343e434e..723b7208e
--- a/middleware/driver/lcd/lcd_driver.c
+++ b/middleware/driver/lcd/lcd_driver.c
@@ -251,6 +251,9 @@ const lcd_device_t *lcd_devices[] =
 #if CONFIG_LCD_ST7701S
 	&lcd_device_st7701s,
 #endif
+
+	&lcd_device_st7701s_ql,
+
 };
 
 static lcd_driver_t s_lcd = {0};
@@ -3136,7 +3139,7 @@ int32_t lcd_driver_get_spi_gpio(LCD_SPI_GPIO_TYPE_E gpio_type)
         case SPI_GPIO_CLK:
             if(s_lcd.config.device->id == LCD_DEVICE_ST7701S)
                 gpio_value = GPIO_35;
-            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S)
+            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S||s_lcd.config.device->id == LCD_DEVICE_ST7701S_QL)
                 gpio_value = GPIO_9;
             else
                 gpio_value = GPIO_2;
@@ -3145,7 +3148,7 @@ int32_t lcd_driver_get_spi_gpio(LCD_SPI_GPIO_TYPE_E gpio_type)
         case SPI_GPIO_CSX:
             if(s_lcd.config.device->id == LCD_DEVICE_ST7701S)
                 gpio_value = GPIO_34;
-            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S)
+            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S||s_lcd.config.device->id == LCD_DEVICE_ST7701S_QL)
                 gpio_value = GPIO_5;
             else
                 gpio_value = GPIO_3;
@@ -3154,7 +3157,7 @@ int32_t lcd_driver_get_spi_gpio(LCD_SPI_GPIO_TYPE_E gpio_type)
         case SPI_GPIO_SDA:
             if(s_lcd.config.device->id == LCD_DEVICE_ST7701S)
                 gpio_value = GPIO_36;
-            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S)
+            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S||s_lcd.config.device->id == LCD_DEVICE_ST7701S_QL)
                 gpio_value = GPIO_8;
             else
                 gpio_value = GPIO_4;
@@ -3163,7 +3166,7 @@ int32_t lcd_driver_get_spi_gpio(LCD_SPI_GPIO_TYPE_E gpio_type)
         case SPI_GPIO_RST:
             if(s_lcd.config.device->id == LCD_DEVICE_ST7701S)
                 gpio_value = GPIO_15;
-            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S)
+            else if(s_lcd.config.device->id == LCD_DEVIDE_ST7710S||s_lcd.config.device->id == LCD_DEVICE_ST7701S_QL)
                 gpio_value = GPIO_6;
             else
                 gpio_value = GPIO_6;
diff --git a/middleware/driver/lcd/lcd_st7701s_ql.c b/middleware/driver/lcd/lcd_st7701s_ql.c
new file mode 100644
index 000000000..34377bfa3
--- /dev/null
+++ b/middleware/driver/lcd/lcd_st7701s_ql.c
@@ -0,0 +1,402 @@
+/**
+ * @file lcd_st7701s_ck.c
+ * @author your name (you@domain.com)
+ * @brief 
+ * @version 0.1
+ * @date 2023-04-19
+ * 
+ * @copyright Copyright (c) 2023
+ * 
+ */
+
+#include <driver/gpio.h>
+#include <driver/media_types.h>
+#include <driver/lcd_types.h>
+#include <driver/lcd_spi.h>
+#include "bk_misc.h"
+#include "lcd_devices.h"
+#include "gpio_driver.h"
+#include <driver/lcd.h>
+
+#include "../../../components/media/include/media_app.h"
+
+#if CONFIG_PWM
+#include <driver/pwm.h>
+#endif
+
+#define Delay	delay_ms
+#define SPI_WriteComm 	lcd_spi_write_cmd
+#define SPI_WriteData 	lcd_spi_write_data
+
+static const lcd_rgb_t lcd_rgb =
+{
+	.clk = LCD_26M,
+	.data_out_clk_edge = NEGEDGE_OUTPUT,
+
+	.hsync_pulse_width = 2,
+	.vsync_pulse_width = 2,
+	.hsync_back_porch = 10, //40,  //3
+	.hsync_front_porch = 10, //5,  //2
+	.vsync_back_porch = 10, //8,   //1
+	.vsync_front_porch = 10, //8,  //1
+};
+
+static void lcd_st7701s_config(void)
+{
+	bk_gpio_set_output_high(LCD_SPI_RST);
+	Delay(20);
+	bk_gpio_set_output_low(LCD_SPI_RST);
+	Delay(100);
+	bk_gpio_set_output_high(LCD_SPI_RST);
+	Delay(120);
+
+	SPI_WriteComm(0xFF);
+	SPI_WriteData(0x77);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x13);
+
+	SPI_WriteComm(0xEF);
+	SPI_WriteData(0x08);
+
+	SPI_WriteComm(0xFF);
+	SPI_WriteData(0x77);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x10);
+
+	SPI_WriteComm(0xC0); //set line number = 854
+	SPI_WriteData(0xe9);
+	SPI_WriteData(0x03);
+
+	SPI_WriteComm(0xC1);
+	SPI_WriteData(0x0A);
+	SPI_WriteData(0x08);
+
+	SPI_WriteComm(0xC2);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x06);
+
+	SPI_WriteComm(0xC7);
+	SPI_WriteData(0x00);//04
+
+	SPI_WriteComm(0xCC);
+	SPI_WriteData(0x18);
+
+	SPI_WriteComm(0xB0);
+	SPI_WriteData(0x40);
+	SPI_WriteData(0x0B);
+	SPI_WriteData(0x58);
+	SPI_WriteData(0x0C);
+	SPI_WriteData(0x11);
+	SPI_WriteData(0x06);
+	SPI_WriteData(0x0B);
+	SPI_WriteData(0x08);
+	SPI_WriteData(0x09);
+	SPI_WriteData(0x26);
+	SPI_WriteData(0x06);
+	SPI_WriteData(0x15);
+	SPI_WriteData(0x18);
+	SPI_WriteData(0x6A);
+	SPI_WriteData(0x6E);
+	SPI_WriteData(0x4F);
+
+	SPI_WriteComm(0xB1);
+	SPI_WriteData(0x40);
+	SPI_WriteData(0x11);
+	SPI_WriteData(0x57);
+	SPI_WriteData(0x0D);
+	SPI_WriteData(0x11);
+	SPI_WriteData(0x07);
+	SPI_WriteData(0x0B);
+	SPI_WriteData(0x09);
+	SPI_WriteData(0x08);
+	SPI_WriteData(0x26);
+	SPI_WriteData(0x05);
+	SPI_WriteData(0xD3);
+	SPI_WriteData(0x0D);
+	SPI_WriteData(0x6B);
+	SPI_WriteData(0x6E);
+	SPI_WriteData(0x4F);
+
+	SPI_WriteComm(0xFF);
+	SPI_WriteData(0x77);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x11);
+
+	SPI_WriteComm(0xB0);
+	SPI_WriteData(0x56);
+
+	SPI_WriteComm(0xB1);
+	SPI_WriteData(0x39);
+
+	SPI_WriteComm(0xB2);
+	SPI_WriteData(0x87);
+
+	SPI_WriteComm(0xB3);
+	SPI_WriteData(0x80);
+
+	SPI_WriteComm(0xB5);
+	SPI_WriteData(0x4E);
+
+	SPI_WriteComm(0xB7);
+	SPI_WriteData(0x85);
+
+	SPI_WriteComm(0xB8);
+	SPI_WriteData(0x10);
+
+	SPI_WriteComm(0xB9);
+	SPI_WriteData(0x10);
+
+	SPI_WriteComm(0xBC);
+	SPI_WriteData(0x03);
+
+	SPI_WriteComm(0xC0);
+	SPI_WriteData(0x89);
+
+	SPI_WriteComm(0xC1);
+	SPI_WriteData(0x78);
+
+	SPI_WriteComm(0xC2);
+	SPI_WriteData(0x78);
+
+	SPI_WriteComm(0xD0);
+	SPI_WriteData(0x88);
+
+	SPI_WriteComm(0xE0);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x02);
+
+	SPI_WriteComm(0xE1);
+	SPI_WriteData(0x04);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x05);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x20);
+	SPI_WriteData(0x20);
+
+	SPI_WriteComm(0xE2);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE3);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x33);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE4);
+	SPI_WriteData(0x22);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE5);
+	SPI_WriteData(0x04);
+	SPI_WriteData(0x5C);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x06);
+	SPI_WriteData(0x5C);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE6);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x33);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE7);
+	SPI_WriteData(0x22);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE8);
+	SPI_WriteData(0x05);
+	SPI_WriteData(0x5C);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x07);
+	SPI_WriteData(0x5C);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0xA0);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xEB);
+	SPI_WriteData(0x02);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x40);
+	SPI_WriteData(0x40);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xEC);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xED);
+	SPI_WriteData(0xAA);
+	SPI_WriteData(0x45);
+	SPI_WriteData(0x0B);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xFF);
+	SPI_WriteData(0xB0);
+	SPI_WriteData(0x54);
+	SPI_WriteData(0xAA);
+
+	SPI_WriteComm(0xEF);
+	SPI_WriteData(0x08);
+	SPI_WriteData(0x08);
+	SPI_WriteData(0x08);
+	SPI_WriteData(0x45);
+	SPI_WriteData(0x3F);
+	SPI_WriteData(0x54);
+
+	SPI_WriteComm(0xFF);
+	SPI_WriteData(0x77);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x13);
+
+	SPI_WriteComm(0xE8);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x0E);
+
+	SPI_WriteComm(0x11);
+	Delay(120);
+	SPI_WriteComm(0xFF);
+	SPI_WriteData(0x77);
+	SPI_WriteData(0x01);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x13);
+
+	SPI_WriteComm(0xE8);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x0C);
+	Delay(10);
+
+	SPI_WriteComm(0xE8);
+	SPI_WriteData(0x00);
+	SPI_WriteData(0x00);
+
+	SPI_WriteComm(0xE6);
+	SPI_WriteData(0x16);
+	SPI_WriteData(0x7C);
+
+	SPI_WriteComm(0x3A);
+	SPI_WriteData(0x07); //RGB565
+
+	SPI_WriteComm(0x13);
+
+	SPI_WriteComm(0x36);
+	SPI_WriteData(0x18);//08,10
+
+
+	SPI_WriteComm(0x29);
+	Delay(20);
+
+
+}
+
+static void lcd_st7701s_init(void)
+{
+#if 1
+    os_printf("lcd_st7701s_ql: init.\r\n");
+#endif
+	lcd_spi_init_gpio();
+	lcd_st7701s_config();
+	//media_app_lcd_rotate(ROTATE_270);
+	bk_lcd_set_partical_display(1,187,667,0,480);
+}
+
+static void st7701s_lcd_backlight_open(void)
+{
+	os_printf("lcd_st7701s_ql: backlight open.\r\n");
+#if CONFIG_PWM
+	lcd_driver_backlight_init(LCD_RGB_PWM_BACKLIGHT, 100);
+#endif
+}
+
+static void lcd_set_backlight(uint8_t percent)
+{
+#if CONFIG_PWM
+	pwm_period_duty_config_t config = {0};
+
+	if (percent > 100)
+	{
+		percent  = 100;
+	}
+
+	config.period_cycle = 100;
+	config.duty_cycle = percent;
+
+	bk_pwm_set_period_duty(LCD_RGB_PWM_BACKLIGHT, &config);
+#endif
+}
+
+static void st7701s_lcd_backlight_close(void)
+{
+	os_printf("lcd_st7701s: backlight close.\r\n");
+#if CONFIG_PWM
+	lcd_driver_backlight_deinit(LCD_RGB_PWM_BACKLIGHT);
+#endif
+}
+
+const lcd_device_t lcd_device_st7701s_ql =
+{
+	.id = LCD_DEVICE_ST7701S_QL,
+	.name = "st7701s_ql",
+	.type = LCD_TYPE_RGB565,
+	.ppi = PPI_480X854,//PPI_854X480
+	.rgb = &lcd_rgb,
+	.backlight_open = st7701s_lcd_backlight_open,
+	.backlight_set = lcd_set_backlight,
+	.init = lcd_st7701s_init,
+	.backlight_close = st7701s_lcd_backlight_close,
+	.lcd_off = NULL,
+};
